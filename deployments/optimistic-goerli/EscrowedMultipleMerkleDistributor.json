{
  "address": "0x74c0A3bD10634759DC8B4CA7078C8Bf85bFE1271",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardEscrow",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "MerkleRootAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerNominated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMultipleMerkleDistributor.Claims[]",
          "name": "claims",
          "type": "tuple[]"
        }
      ],
      "name": "claimMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributionEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "isClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "merkleRoots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "newMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "nominateNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nominatedOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardEscrow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "913a088f466be536257e769b6e434718",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardEscrow\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"MerkleRootAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"internalType\":\"struct IMultipleMerkleDistributor.Claims[]\",\"name\":\"claims\",\"type\":\"tuple[]\"}],\"name\":\"claimMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"merkleRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"newMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"JaredBorders and JChiaramonte7\",\"kind\":\"dev\",\"methods\":{\"claim(uint256,address,uint256,bytes32[],uint256)\":{\"params\":{\"account\":\": address used for escrow entry\",\"amount\":\": $KWENTA amount to be escrowed\",\"epoch\":\": distribution index to check\",\"index\":\": used for merkle tree managment and verification\",\"merkleProof\":\": off-chain generated proof of merkle tree inclusion\"}},\"claimMultiple((uint256,address,uint256,bytes32[],uint256)[])\":{\"params\":{\"claims\":\": array of valid claims\"}},\"constructor\":{\"params\":{\"_owner\":\": designated owner of this contract\",\"_rewardEscrow\":\": address of kwenta escrow for tokens claimed\",\"_token\":\": address of erc20 token to be distributed\"}},\"isClaimed(uint256,uint256)\":{\"params\":{\"epoch\":\": distribution index to check\",\"index\":\": used for claim managment\"},\"returns\":{\"_0\":\"true if indexed claim has been claimed\"}},\"newMerkleRoot(bytes32)\":{\"details\":\"calling this function will increment distributionEpoch\",\"params\":{\"_merkleRoot\":\": new merkle root\"}}},\"title\":\"Kwenta MultipleMerkleDistributor\",\"version\":1},\"userdoc\":{\"events\":{\"Claimed(uint256,address,uint256,uint256)\":{\"notice\":\"event is triggered whenever a call to `claim` succeeds\"},\"MerkleRootAdded(uint256)\":{\"notice\":\"event is triggered whenever a new merkle root is added\"}},\"kind\":\"user\",\"methods\":{\"claim(uint256,address,uint256,bytes32[],uint256)\":{\"notice\":\"attempt to claim as `account` and escrow KWENTA for `account`\"},\"claimMultiple((uint256,address,uint256,bytes32[],uint256)[])\":{\"notice\":\"function that aggregates multiple claims\"},\"constructor\":{\"notice\":\"set addresses for deployed rewardEscrow and KWENTA. Establish merkle root for verification\"},\"distributionEpoch()\":{\"notice\":\"an index that is incremented for each new merkle root\"},\"isClaimed(uint256,uint256)\":{\"notice\":\"determine if indexed claim has been claimed\"},\"merkleRoots(uint256)\":{\"notice\":\"an epoch to merkle root mapping of a merkle tree containing account balances available to claim\"},\"newMerkleRoot(bytes32)\":{\"notice\":\"set new merkle root for new distribution epoch\"},\"rewardEscrow()\":{\"notice\":\"escrow for tokens claimed\"},\"token()\":{\"notice\":\"token to be distributed (KWENTA)\"}},\"notice\":\"Facilitates trading incentives distribution over multiple periods.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultipleMerkleDistributor.sol\":\"MultipleMerkleDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1bbdc6813c021e138da527c44d2615931b0e5c7fa2f58369846ed288324a8\",\"license\":\"MIT\"},\"contracts/MultipleMerkleDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Owned.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"./interfaces/IRewardEscrow.sol\\\";\\nimport \\\"./interfaces/IMultipleMerkleDistributor.sol\\\";\\n\\n/// @title Kwenta MultipleMerkleDistributor\\n/// @author JaredBorders and JChiaramonte7\\n/// @notice Facilitates trading incentives distribution over multiple periods.\\ncontract MultipleMerkleDistributor is IMultipleMerkleDistributor, Owned {\\n    /// @notice escrow for tokens claimed\\n    address public immutable override rewardEscrow;\\n\\n    /// @notice token to be distributed (KWENTA)\\n    address public immutable override token;\\n\\n    /// @notice an index that is incremented for each new merkle root\\n    uint256 public distributionEpoch;\\n\\n    /// @notice an epoch to merkle root mapping\\n    /// of a merkle tree containing account balances available to claim\\n    mapping(uint256 => bytes32) public override merkleRoots;\\n\\n    /// @notice an epoch to packed array of claimed booleans mapping\\n    mapping(uint256 => mapping(uint256 => uint256)) private claimedBitMaps;\\n\\n    /// @notice set addresses for deployed rewardEscrow and KWENTA.\\n    /// Establish merkle root for verification\\n    /// @param _owner: designated owner of this contract\\n    /// @param _token: address of erc20 token to be distributed\\n    /// @param _rewardEscrow: address of kwenta escrow for tokens claimed\\n    constructor(\\n        address _owner,\\n        address _token,\\n        address _rewardEscrow\\n    ) Owned(_owner) {\\n        token = _token;\\n        rewardEscrow = _rewardEscrow;\\n    }\\n\\n    /// @notice set new merkle root for new distribution epoch\\n    /// @dev calling this function will increment distributionEpoch\\n    /// @param _merkleRoot: new merkle root\\n    function newMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\\n        merkleRoots[distributionEpoch] = _merkleRoot;\\n        emit MerkleRootAdded(distributionEpoch);\\n        distributionEpoch++;\\n    }\\n\\n    /// @notice determine if indexed claim has been claimed\\n    /// @param index: used for claim managment\\n    /// @param epoch: distribution index to check\\n    /// @return true if indexed claim has been claimed\\n    function isClaimed(uint256 index, uint256 epoch)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        uint256 claimedWordIndex = index / 256;\\n        uint256 claimedBitIndex = index % 256;\\n        uint256 claimedWord = claimedBitMaps[epoch][claimedWordIndex];\\n        uint256 mask = (1 << claimedBitIndex);\\n        return claimedWord & mask == mask;\\n    }\\n\\n    /// @notice set claimed status for indexed claim to true\\n    /// @param index: used for claim managment\\n    /// @param epoch: distribution index to check\\n    function _setClaimed(uint256 index, uint256 epoch) private {\\n        uint256 claimedWordIndex = index / 256;\\n        uint256 claimedBitIndex = index % 256;\\n        claimedBitMaps[epoch][claimedWordIndex] =\\n            claimedBitMaps[epoch][claimedWordIndex] |\\n            (1 << claimedBitIndex);\\n    }\\n\\n    /// @notice attempt to claim as `account` and escrow KWENTA for `account`\\n    /// @param index: used for merkle tree managment and verification\\n    /// @param account: address used for escrow entry\\n    /// @param amount: $KWENTA amount to be escrowed\\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\\n    /// @param epoch: distribution index to check\\n    function claim(\\n        uint256 index,\\n        address account,\\n        uint256 amount,\\n        bytes32[] calldata merkleProof,\\n        uint256 epoch\\n    ) public override {\\n        require(\\n            !isClaimed(index, epoch),\\n            \\\"MultipleMerkleDistributor: Drop already claimed.\\\"\\n        );\\n\\n        // verify the merkle proof\\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\\n        require(\\n            MerkleProof.verify(merkleProof, merkleRoots[epoch], node),\\n            \\\"MultipleMerkleDistributor: Invalid proof.\\\"\\n        );\\n\\n        // mark it claimed and send the token to RewardEscrow\\n        _setClaimed(index, epoch);\\n        IERC20(token).approve(rewardEscrow, amount);\\n        IRewardEscrow(rewardEscrow).createEscrowEntry(\\n            account,\\n            amount,\\n            52 weeks\\n        );\\n\\n        emit Claimed(index, account, amount, epoch);\\n    }\\n\\n    /// @notice function that aggregates multiple claims\\n    /// @param claims: array of valid claims\\n    function claimMultiple(Claims[] calldata claims) external override {\\n        uint256 cacheLength = claims.length;\\n        for (uint256 i = 0; i < cacheLength; ) {\\n            claim(\\n                claims[i].index,\\n                claims[i].account,\\n                claims[i].amount,\\n                claims[i].merkleProof,\\n                claims[i].epoch\\n            );\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x14c007b51bf0bf90bc4d0796b2b863e3d3bdecde4fc53543e7e993961d9be6c5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMultipleMerkleDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n// Allows anyone to claim a token if they exist in a merkle root.\\ninterface IMultipleMerkleDistributor {\\n    /// @notice data structure for aggregating multiple claims\\n    struct Claims {\\n        uint256 index;\\n        address account;\\n        uint256 amount;\\n        bytes32[] merkleProof;\\n        uint256 epoch;\\n    }\\n\\n    /// @notice event is triggered whenever a call to `claim` succeeds\\n    event Claimed(\\n        uint256 index,\\n        address account,\\n        uint256 amount,\\n        uint256 epoch\\n    );\\n\\n    /// @notice event is triggered whenever a new merkle root is added\\n    event MerkleRootAdded(uint256 epoch);\\n\\n    /// @return escrow for tokens claimed\\n    function rewardEscrow() external view returns (address);\\n\\n    /// @return token to be distributed (KWENTA)\\n    function token() external view returns (address);\\n\\n    // @return the merkle root of the merkle tree containing account balances available to claim\\n    function merkleRoots(uint256) external view returns (bytes32);\\n\\n    /// @notice determine if indexed claim has been claimed\\n    /// @param index: used for claim managment\\n    /// @param epoch: distribution index number\\n    /// @return true if indexed claim has been claimed\\n    function isClaimed(uint256 index, uint256 epoch)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice attempt to claim as `account` and escrow KWENTA for `account`\\n    /// @param index: used for merkle tree managment and verification\\n    /// @param account: address used for escrow entry\\n    /// @param amount: $KWENTA amount to be escrowed\\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\\n    /// @param epoch: distribution index number\\n    function claim(\\n        uint256 index,\\n        address account,\\n        uint256 amount,\\n        bytes32[] calldata merkleProof,\\n        uint256 epoch\\n    ) external;\\n\\n    /// @notice function that aggregates multiple claims\\n    /// @param claims: array of valid claims\\n    function claimMultiple(Claims[] calldata claims) external;\\n}\\n\",\"keccak256\":\"0xc7ce087e1e52e6ed2aeb1527054478ddfb86898f24a9f2e7480d1927db53d6e1\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRewardEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary VestingEntries {\\n    struct VestingEntry {\\n        uint64 endTime;\\n        uint256 escrowAmount;\\n        uint256 duration;\\n    }\\n    struct VestingEntryWithID {\\n        uint64 endTime;\\n        uint256 escrowAmount;\\n        uint256 entryID;\\n    }\\n}\\n\\ninterface IRewardEscrow {\\n    // Views\\n    function getKwentaAddress() external view returns (address);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function numVestingEntries(address account) external view returns (uint256);\\n\\n    function totalEscrowedAccountBalance(address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalVestedAccountBalance(address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getVestingQuantity(address account, uint256[] calldata entryIDs)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getVestingSchedules(\\n        address account,\\n        uint256 index,\\n        uint256 pageSize\\n    ) external view returns (VestingEntries.VestingEntryWithID[] memory);\\n\\n    function getAccountVestingEntryIDs(\\n        address account,\\n        uint256 index,\\n        uint256 pageSize\\n    ) external view returns (uint256[] memory);\\n\\n    function getVestingEntryClaimable(address account, uint256 entryID)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getVestingEntry(address account, uint256 entryID)\\n        external\\n        view\\n        returns (\\n            uint64,\\n            uint256,\\n            uint256\\n        );\\n\\n    // Mutative functions\\n    function vest(uint256[] calldata entryIDs) external;\\n\\n    function createEscrowEntry(\\n        address beneficiary,\\n        uint256 deposit,\\n        uint256 duration\\n    ) external;\\n\\n    function appendVestingEntry(\\n        address account,\\n        uint256 quantity,\\n        uint256 duration\\n    ) external;\\n\\n    function stakeEscrow(uint256 _amount) external;\\n\\n    function unstakeEscrow(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x982ccdf737fd3aa86031dd74db05ab789c1e9e72f1c1f57a3b5cd59b28378c3f\",\"license\":\"MIT\"},\"contracts/utils/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// https://docs.synthetix.io/contracts/source/contracts/owned\\ncontract Owned {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    function _onlyOwner() private view {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\\n\",\"keccak256\":\"0x9f51a9dd99cc51a332f0a635628dc89262c126c358e4e89041aadbe9a519b06a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200197e3803806200197e8339818101604052810190620000379190620001b6565b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000ab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a29062000277565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c6000826040516200011f9291906200024a565b60405180910390a1508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050505062000326565b600081519050620001b0816200030c565b92915050565b600080600060608486031215620001d257620001d1620002de565b5b6000620001e2868287016200019f565b9350506020620001f5868287016200019f565b925050604062000208868287016200019f565b9150509250925092565b6200021d81620002aa565b82525050565b60006200023260198362000299565b91506200023f82620002e3565b602082019050919050565b600060408201905062000261600083018562000212565b62000270602083018462000212565b9392505050565b60006020820190508181036000830152620002928162000223565b9050919050565b600082825260208201905092915050565b6000620002b782620002be565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b7f4f776e657220616464726573732063616e6e6f74206265203000000000000000600082015250565b6200031781620002aa565b81146200032357600080fd5b50565b60805160601c60a05160601c611617620003676000396000818161079601526109a501526000818161053d015281816107d2015261086401526116176000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806393503099116100715780639350309914610169578063a430be6c14610185578063ab5943db146101a3578063c02bb7ba146101bf578063f364c90c146101db578063fc0c546a1461020b576100b4565b80630b09d515146100b95780631627540c146100d757806353a47bb7146100f357806371c5ecb11461011157806379ba5097146101415780638da5cb5b1461014b575b600080fd5b6100c1610229565b6040516100ce9190611144565b60405180910390f35b6100f160048036038101906100ec9190610c8a565b61022f565b005b6100fb6102b2565b6040516101089190610fea565b60405180910390f35b61012b60048036038101906101269190610d5e565b6102d8565b60405161013891906110a9565b60405180910390f35b6101496102f0565b005b6101536104a1565b6040516101609190610fea565b60405180910390f35b610183600480360381019061017e9190610d31565b6104c5565b005b61018d61053b565b60405161019a9190610fea565b60405180910390f35b6101bd60048036038101906101b89190610cb7565b61055f565b005b6101d960048036038101906101d49190610d8b565b610673565b005b6101f560048036038101906101f09190610e25565b61093b565b604051610202919061108e565b60405180910390f35b6102136109a3565b6040516102209190610fea565b60405180910390f35b60025481565b6102376109c7565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce22816040516102a79190610fea565b60405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610380576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610377906110c4565b60405180910390fd5b7fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516103f3929190611005565b60405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104cd6109c7565b80600360006002548152602001908152602001600020819055507ffa7a4543b160b1709fbf83816c0a0ea72a11709913c70902c457f0030af120e56002546040516105189190611144565b60405180910390a160026000815480929190610533906112d5565b919050555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600082829050905060005b8181101561066d57610660848483818110610588576105876113e5565b5b905060200281019061059a9190611207565b600001358585848181106105b1576105b06113e5565b5b90506020028101906105c39190611207565b60200160208101906105d59190610c8a565b8686858181106105e8576105e76113e5565b5b90506020028101906105fa9190611207565b60400135878786818110610611576106106113e5565b5b90506020028101906106239190611207565b806060019061063291906111a4565b898988818110610645576106446113e5565b5b90506020028101906106579190611207565b60800135610673565b808060010191505061056a565b50505050565b61067d868261093b565b156106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b4906110e4565b60405180910390fd5b60008686866040516020016106d493929190610fad565b60405160208183030381529060405280519060200120905061074b848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050600360008581526020019081526020016000205483610a57565b61078a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078190611124565b60405180910390fd5b6107948783610b0d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b815260040161080f92919061102e565b602060405180830381600087803b15801561082957600080fd5b505af115801561083d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108619190610d04565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a0416ed387876301dfe2006040518463ffffffff1660e01b81526004016108c393929190611057565b600060405180830381600087803b1580156108dd57600080fd5b505af11580156108f1573d6000803e3d6000fd5b505050507fd9cb1e2714d65a111c0f20f060176ad657496bd47a3de04ec7c3d4ca232112ac8787878560405161092a949392919061115f565b60405180910390a150505050505050565b6000806101008461094c9190611240565b905060006101008561095e9190611356565b905060006004600086815260200190815260200160002060008481526020019081526020016000205490506000826001901b9050808183161494505050505092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4c90611104565b60405180910390fd5b565b60008082905060005b8551811015610aff576000868281518110610a7e57610a7d6113e5565b5b60200260200101519050808311610abf578281604051602001610aa2929190610f81565b604051602081830303815290604052805190602001209250610aeb565b8083604051602001610ad2929190610f81565b6040516020818303038152906040528051906020012092505b508080610af7906112d5565b915050610a60565b508381149150509392505050565b600061010083610b1d9190611240565b9050600061010084610b2f9190611356565b9050806001901b60046000858152602001908152602001600020600084815260200190815260200160002054176004600085815260200190815260200160002060008481526020019081526020016000208190555050505050565b600081359050610b9981611585565b92915050565b60008083601f840112610bb557610bb4611419565b5b8235905067ffffffffffffffff811115610bd257610bd1611414565b5b602083019150836020820283011115610bee57610bed611428565b5b9250929050565b60008083601f840112610c0b57610c0a611419565b5b8235905067ffffffffffffffff811115610c2857610c27611414565b5b602083019150836020820283011115610c4457610c43611428565b5b9250929050565b600081519050610c5a8161159c565b92915050565b600081359050610c6f816115b3565b92915050565b600081359050610c84816115ca565b92915050565b600060208284031215610ca057610c9f611437565b5b6000610cae84828501610b8a565b91505092915050565b60008060208385031215610cce57610ccd611437565b5b600083013567ffffffffffffffff811115610cec57610ceb611432565b5b610cf885828601610bf5565b92509250509250929050565b600060208284031215610d1a57610d19611437565b5b6000610d2884828501610c4b565b91505092915050565b600060208284031215610d4757610d46611437565b5b6000610d5584828501610c60565b91505092915050565b600060208284031215610d7457610d73611437565b5b6000610d8284828501610c75565b91505092915050565b60008060008060008060a08789031215610da857610da7611437565b5b6000610db689828a01610c75565b9650506020610dc789828a01610b8a565b9550506040610dd889828a01610c75565b945050606087013567ffffffffffffffff811115610df957610df8611432565b5b610e0589828a01610b9f565b93509350506080610e1889828a01610c75565b9150509295509295509295565b60008060408385031215610e3c57610e3b611437565b5b6000610e4a85828601610c75565b9250506020610e5b85828601610c75565b9150509250929050565b610e6e81611271565b82525050565b610e85610e8082611271565b61131e565b82525050565b610e9481611283565b82525050565b610ea38161128f565b82525050565b610eba610eb58261128f565b611330565b82525050565b610ec9816112c3565b82525050565b6000610edc60358361122f565b9150610ee782611449565b604082019050919050565b6000610eff60308361122f565b9150610f0a82611498565b604082019050919050565b6000610f22602f8361122f565b9150610f2d826114e7565b604082019050919050565b6000610f4560298361122f565b9150610f5082611536565b604082019050919050565b610f64816112b9565b82525050565b610f7b610f76826112b9565b61134c565b82525050565b6000610f8d8285610ea9565b602082019150610f9d8284610ea9565b6020820191508190509392505050565b6000610fb98286610f6a565b602082019150610fc98285610e74565b601482019150610fd98284610f6a565b602082019150819050949350505050565b6000602082019050610fff6000830184610e65565b92915050565b600060408201905061101a6000830185610e65565b6110276020830184610e65565b9392505050565b60006040820190506110436000830185610e65565b6110506020830184610f5b565b9392505050565b600060608201905061106c6000830186610e65565b6110796020830185610f5b565b6110866040830184610ec0565b949350505050565b60006020820190506110a36000830184610e8b565b92915050565b60006020820190506110be6000830184610e9a565b92915050565b600060208201905081810360008301526110dd81610ecf565b9050919050565b600060208201905081810360008301526110fd81610ef2565b9050919050565b6000602082019050818103600083015261111d81610f15565b9050919050565b6000602082019050818103600083015261113d81610f38565b9050919050565b60006020820190506111596000830184610f5b565b92915050565b60006080820190506111746000830187610f5b565b6111816020830186610e65565b61118e6040830185610f5b565b61119b6060830184610f5b565b95945050505050565b600080833560016020038436030381126111c1576111c0611423565b5b80840192508235915067ffffffffffffffff8211156111e3576111e261141e565b5b6020830192506020820236038313156111ff576111fe61142d565b5b509250929050565b60008235600160a00383360303811261122357611222611423565b5b80830191505092915050565b600082825260208201905092915050565b600061124b826112b9565b9150611256836112b9565b925082611266576112656113b6565b5b828204905092915050565b600061127c82611299565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006112ce826112b9565b9050919050565b60006112e0826112b9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561131357611312611387565b5b600182019050919050565b60006113298261133a565b9050919050565b6000819050919050565b60006113458261143c565b9050919050565b6000819050919050565b6000611361826112b9565b915061136c836112b9565b92508261137c5761137b6113b6565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008160601b9050919050565b7f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560008201527f2063616e20616363657074206f776e6572736869700000000000000000000000602082015250565b7f4d756c7469706c654d65726b6c654469737472696275746f723a2044726f702060008201527f616c726561647920636c61696d65642e00000000000000000000000000000000602082015250565b7f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660008201527f6f726d207468697320616374696f6e0000000000000000000000000000000000602082015250565b7f4d756c7469706c654d65726b6c654469737472696275746f723a20496e76616c60008201527f69642070726f6f662e0000000000000000000000000000000000000000000000602082015250565b61158e81611271565b811461159957600080fd5b50565b6115a581611283565b81146115b057600080fd5b50565b6115bc8161128f565b81146115c757600080fd5b50565b6115d3816112b9565b81146115de57600080fd5b5056fea2646970667358221220985af8a396f664e37df99f30185f939cb6de09ef6eea25dc5635c1e260630b7e64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806393503099116100715780639350309914610169578063a430be6c14610185578063ab5943db146101a3578063c02bb7ba146101bf578063f364c90c146101db578063fc0c546a1461020b576100b4565b80630b09d515146100b95780631627540c146100d757806353a47bb7146100f357806371c5ecb11461011157806379ba5097146101415780638da5cb5b1461014b575b600080fd5b6100c1610229565b6040516100ce9190611144565b60405180910390f35b6100f160048036038101906100ec9190610c8a565b61022f565b005b6100fb6102b2565b6040516101089190610fea565b60405180910390f35b61012b60048036038101906101269190610d5e565b6102d8565b60405161013891906110a9565b60405180910390f35b6101496102f0565b005b6101536104a1565b6040516101609190610fea565b60405180910390f35b610183600480360381019061017e9190610d31565b6104c5565b005b61018d61053b565b60405161019a9190610fea565b60405180910390f35b6101bd60048036038101906101b89190610cb7565b61055f565b005b6101d960048036038101906101d49190610d8b565b610673565b005b6101f560048036038101906101f09190610e25565b61093b565b604051610202919061108e565b60405180910390f35b6102136109a3565b6040516102209190610fea565b60405180910390f35b60025481565b6102376109c7565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce22816040516102a79190610fea565b60405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610380576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610377906110c4565b60405180910390fd5b7fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516103f3929190611005565b60405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104cd6109c7565b80600360006002548152602001908152602001600020819055507ffa7a4543b160b1709fbf83816c0a0ea72a11709913c70902c457f0030af120e56002546040516105189190611144565b60405180910390a160026000815480929190610533906112d5565b919050555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600082829050905060005b8181101561066d57610660848483818110610588576105876113e5565b5b905060200281019061059a9190611207565b600001358585848181106105b1576105b06113e5565b5b90506020028101906105c39190611207565b60200160208101906105d59190610c8a565b8686858181106105e8576105e76113e5565b5b90506020028101906105fa9190611207565b60400135878786818110610611576106106113e5565b5b90506020028101906106239190611207565b806060019061063291906111a4565b898988818110610645576106446113e5565b5b90506020028101906106579190611207565b60800135610673565b808060010191505061056a565b50505050565b61067d868261093b565b156106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b4906110e4565b60405180910390fd5b60008686866040516020016106d493929190610fad565b60405160208183030381529060405280519060200120905061074b848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050600360008581526020019081526020016000205483610a57565b61078a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078190611124565b60405180910390fd5b6107948783610b0d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b815260040161080f92919061102e565b602060405180830381600087803b15801561082957600080fd5b505af115801561083d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108619190610d04565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a0416ed387876301dfe2006040518463ffffffff1660e01b81526004016108c393929190611057565b600060405180830381600087803b1580156108dd57600080fd5b505af11580156108f1573d6000803e3d6000fd5b505050507fd9cb1e2714d65a111c0f20f060176ad657496bd47a3de04ec7c3d4ca232112ac8787878560405161092a949392919061115f565b60405180910390a150505050505050565b6000806101008461094c9190611240565b905060006101008561095e9190611356565b905060006004600086815260200190815260200160002060008481526020019081526020016000205490506000826001901b9050808183161494505050505092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4c90611104565b60405180910390fd5b565b60008082905060005b8551811015610aff576000868281518110610a7e57610a7d6113e5565b5b60200260200101519050808311610abf578281604051602001610aa2929190610f81565b604051602081830303815290604052805190602001209250610aeb565b8083604051602001610ad2929190610f81565b6040516020818303038152906040528051906020012092505b508080610af7906112d5565b915050610a60565b508381149150509392505050565b600061010083610b1d9190611240565b9050600061010084610b2f9190611356565b9050806001901b60046000858152602001908152602001600020600084815260200190815260200160002054176004600085815260200190815260200160002060008481526020019081526020016000208190555050505050565b600081359050610b9981611585565b92915050565b60008083601f840112610bb557610bb4611419565b5b8235905067ffffffffffffffff811115610bd257610bd1611414565b5b602083019150836020820283011115610bee57610bed611428565b5b9250929050565b60008083601f840112610c0b57610c0a611419565b5b8235905067ffffffffffffffff811115610c2857610c27611414565b5b602083019150836020820283011115610c4457610c43611428565b5b9250929050565b600081519050610c5a8161159c565b92915050565b600081359050610c6f816115b3565b92915050565b600081359050610c84816115ca565b92915050565b600060208284031215610ca057610c9f611437565b5b6000610cae84828501610b8a565b91505092915050565b60008060208385031215610cce57610ccd611437565b5b600083013567ffffffffffffffff811115610cec57610ceb611432565b5b610cf885828601610bf5565b92509250509250929050565b600060208284031215610d1a57610d19611437565b5b6000610d2884828501610c4b565b91505092915050565b600060208284031215610d4757610d46611437565b5b6000610d5584828501610c60565b91505092915050565b600060208284031215610d7457610d73611437565b5b6000610d8284828501610c75565b91505092915050565b60008060008060008060a08789031215610da857610da7611437565b5b6000610db689828a01610c75565b9650506020610dc789828a01610b8a565b9550506040610dd889828a01610c75565b945050606087013567ffffffffffffffff811115610df957610df8611432565b5b610e0589828a01610b9f565b93509350506080610e1889828a01610c75565b9150509295509295509295565b60008060408385031215610e3c57610e3b611437565b5b6000610e4a85828601610c75565b9250506020610e5b85828601610c75565b9150509250929050565b610e6e81611271565b82525050565b610e85610e8082611271565b61131e565b82525050565b610e9481611283565b82525050565b610ea38161128f565b82525050565b610eba610eb58261128f565b611330565b82525050565b610ec9816112c3565b82525050565b6000610edc60358361122f565b9150610ee782611449565b604082019050919050565b6000610eff60308361122f565b9150610f0a82611498565b604082019050919050565b6000610f22602f8361122f565b9150610f2d826114e7565b604082019050919050565b6000610f4560298361122f565b9150610f5082611536565b604082019050919050565b610f64816112b9565b82525050565b610f7b610f76826112b9565b61134c565b82525050565b6000610f8d8285610ea9565b602082019150610f9d8284610ea9565b6020820191508190509392505050565b6000610fb98286610f6a565b602082019150610fc98285610e74565b601482019150610fd98284610f6a565b602082019150819050949350505050565b6000602082019050610fff6000830184610e65565b92915050565b600060408201905061101a6000830185610e65565b6110276020830184610e65565b9392505050565b60006040820190506110436000830185610e65565b6110506020830184610f5b565b9392505050565b600060608201905061106c6000830186610e65565b6110796020830185610f5b565b6110866040830184610ec0565b949350505050565b60006020820190506110a36000830184610e8b565b92915050565b60006020820190506110be6000830184610e9a565b92915050565b600060208201905081810360008301526110dd81610ecf565b9050919050565b600060208201905081810360008301526110fd81610ef2565b9050919050565b6000602082019050818103600083015261111d81610f15565b9050919050565b6000602082019050818103600083015261113d81610f38565b9050919050565b60006020820190506111596000830184610f5b565b92915050565b60006080820190506111746000830187610f5b565b6111816020830186610e65565b61118e6040830185610f5b565b61119b6060830184610f5b565b95945050505050565b600080833560016020038436030381126111c1576111c0611423565b5b80840192508235915067ffffffffffffffff8211156111e3576111e261141e565b5b6020830192506020820236038313156111ff576111fe61142d565b5b509250929050565b60008235600160a00383360303811261122357611222611423565b5b80830191505092915050565b600082825260208201905092915050565b600061124b826112b9565b9150611256836112b9565b925082611266576112656113b6565b5b828204905092915050565b600061127c82611299565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006112ce826112b9565b9050919050565b60006112e0826112b9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561131357611312611387565b5b600182019050919050565b60006113298261133a565b9050919050565b6000819050919050565b60006113458261143c565b9050919050565b6000819050919050565b6000611361826112b9565b915061136c836112b9565b92508261137c5761137b6113b6565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008160601b9050919050565b7f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560008201527f2063616e20616363657074206f776e6572736869700000000000000000000000602082015250565b7f4d756c7469706c654d65726b6c654469737472696275746f723a2044726f702060008201527f616c726561647920636c61696d65642e00000000000000000000000000000000602082015250565b7f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660008201527f6f726d207468697320616374696f6e0000000000000000000000000000000000602082015250565b7f4d756c7469706c654d65726b6c654469737472696275746f723a20496e76616c60008201527f69642070726f6f662e0000000000000000000000000000000000000000000000602082015250565b61158e81611271565b811461159957600080fd5b50565b6115a581611283565b81146115b057600080fd5b50565b6115bc8161128f565b81146115c757600080fd5b50565b6115d3816112b9565b81146115de57600080fd5b5056fea2646970667358221220985af8a396f664e37df99f30185f939cb6de09ef6eea25dc5635c1e260630b7e64736f6c63430008070033",
  "devdoc": {
    "author": "JaredBorders and JChiaramonte7",
    "kind": "dev",
    "methods": {
      "claim(uint256,address,uint256,bytes32[],uint256)": {
        "params": {
          "account": ": address used for escrow entry",
          "amount": ": $KWENTA amount to be escrowed",
          "epoch": ": distribution index to check",
          "index": ": used for merkle tree managment and verification",
          "merkleProof": ": off-chain generated proof of merkle tree inclusion"
        }
      },
      "claimMultiple((uint256,address,uint256,bytes32[],uint256)[])": {
        "params": {
          "claims": ": array of valid claims"
        }
      },
      "constructor": {
        "params": {
          "_owner": ": designated owner of this contract",
          "_rewardEscrow": ": address of kwenta escrow for tokens claimed",
          "_token": ": address of erc20 token to be distributed"
        }
      },
      "isClaimed(uint256,uint256)": {
        "params": {
          "epoch": ": distribution index to check",
          "index": ": used for claim managment"
        },
        "returns": {
          "_0": "true if indexed claim has been claimed"
        }
      },
      "newMerkleRoot(bytes32)": {
        "details": "calling this function will increment distributionEpoch",
        "params": {
          "_merkleRoot": ": new merkle root"
        }
      }
    },
    "title": "Kwenta MultipleMerkleDistributor",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Claimed(uint256,address,uint256,uint256)": {
        "notice": "event is triggered whenever a call to `claim` succeeds"
      },
      "MerkleRootAdded(uint256)": {
        "notice": "event is triggered whenever a new merkle root is added"
      }
    },
    "kind": "user",
    "methods": {
      "claim(uint256,address,uint256,bytes32[],uint256)": {
        "notice": "attempt to claim as `account` and escrow KWENTA for `account`"
      },
      "claimMultiple((uint256,address,uint256,bytes32[],uint256)[])": {
        "notice": "function that aggregates multiple claims"
      },
      "constructor": {
        "notice": "set addresses for deployed rewardEscrow and KWENTA. Establish merkle root for verification"
      },
      "distributionEpoch()": {
        "notice": "an index that is incremented for each new merkle root"
      },
      "isClaimed(uint256,uint256)": {
        "notice": "determine if indexed claim has been claimed"
      },
      "merkleRoots(uint256)": {
        "notice": "an epoch to merkle root mapping of a merkle tree containing account balances available to claim"
      },
      "newMerkleRoot(bytes32)": {
        "notice": "set new merkle root for new distribution epoch"
      },
      "rewardEscrow()": {
        "notice": "escrow for tokens claimed"
      },
      "token()": {
        "notice": "token to be distributed (KWENTA)"
      }
    },
    "notice": "Facilitates trading incentives distribution over multiple periods.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6516,
        "contract": "contracts/MultipleMerkleDistributor.sol:MultipleMerkleDistributor",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6518,
        "contract": "contracts/MultipleMerkleDistributor.sol:MultipleMerkleDistributor",
        "label": "nominatedOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2279,
        "contract": "contracts/MultipleMerkleDistributor.sol:MultipleMerkleDistributor",
        "label": "distributionEpoch",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2285,
        "contract": "contracts/MultipleMerkleDistributor.sol:MultipleMerkleDistributor",
        "label": "merkleRoots",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 2292,
        "contract": "contracts/MultipleMerkleDistributor.sol:MultipleMerkleDistributor",
        "label": "claimedBitMaps",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}